##################################
#                                #
#  NATS Streaming Configuration  #
#                                #
##################################
stan:
  image: nats-streaming:0.18.0
  pullPolicy: IfNotPresent
  replicas: 1

  # Cluster name, generated into a name from the
  # release name by default.
  clusterID:

  logging:
    debug:
    trace:

  # In case of NATS not being embedded then
  # an URL for NATS is required.
  nats:
    url:
    serviceRoleAuth:
      enabled: false
      natsClusterName:

  # TLS
  # Enabled must be true, and a secret name specified for this to work
  tls:
    enabled: false
    # the secret containing the client ca.crt, tls.crt, and tls.key for STAN
    secretName:
    # Reference
    # https://docs.nats.io/nats-streaming-server/configuring/cfgfile#tls-configuration
    settings:
      client_cert: "/etc/nats/certs/tls.crt"
      client_key: "/etc/nats/certs/tls.key"
      client_ca: "/etc/nats/certs/ca.crt"
      timeout: 3

  # The credentials file to load in to connect to the nats server.
  #credentials:
  #  secret:
  #    name: nats-sys-creds
  #    key: sys.creds

nameOverride: ""
imagePullSecrets: []

podAnnotations: {}

# Toggle whether to use setup a Pod Security Context
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
securityContext: null
# securityContext:
#   fsGroup: 1000
#   runAsUser: 1000
#   runAsNonRoot: true

# Affinity for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}

# Resource requests and limits for primary stan container
# ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
resources: {}

# Readiness probe to determine when nats-streaming is ready
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
readinessProbe:
  httpGet:
    path: /streaming/serverz
    port: monitor
  timeoutSeconds: 2

# Readiness probe to determine when nats-streaming cluster is ready.
# Overrides the readinessProbe in case present.
# NOTE: Only works with the nats-streaming alpine image.
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
clusterReadinessProbe:
  enabled: false
  probe:
    exec:
      command: ["/bin/sh", "-c", "n=$(($STAN_REPLICAS-1)); for i in `seq 0 $n`; do wget -qO- $STAN_SERVICE_NAME-$i.$STAN_SERVICE_NAME:8222/streaming/serverz 2> /dev/null > /dev/null; done; if [[ $? -ne 0 ]]; then wget -qO- 127.0.0.1:8222/streaming/serverz | grep role | awk '{print $2}' | grep '\\(Candidate\\|Follower\\|Leader\\)'; else wget -qO- 127.0.0.1:8222/streaming/serverz | grep role | awk '{print $2}' | grep '\\(Follower\\|Leader\\)'; fi;"]
    initialDelaySeconds: 
    periodSeconds: 10

###########################
#                         #
#  Storage configuration  #
#                         #
###########################
store:
  # One value possible out of: "file" | "sql" | "memory"
  type: file

  #
  # Fault tolerance group
  #
  ft:
    group:

  # Configures streaming/store_limits as is.
  #
  # NOTE: Section in snake case since they will become
  # the same objects.
  #
  # Look at the NATS Streaming configuration for this:
  #
  # https://docs.nats.io/nats-streaming-server/configuring/cfgfile#store-limits-configuration
  #
  limits: {}

  #
  # Volume claim configuration. Required if the store type is `file` or if
  # cluster is enabled.
  #
  volume:
    enabled: true
    mount: /data/stan
    storageSize: 1Gi
    accessModes: ReadWriteOnce
    storageClass:

  #
  # File storage settings.
  #
  file:
    path: /data/stan/store
    # Configures streaming/file_options as is.
    #
    # NOTE: Section in snake case since they will become
    # the same objects.
    #
    # Look at the NATS Streaming configuration for this:
    #
    # https://docs.nats.io/nats-streaming-server/configuring/cfgfile#file-options-configuration
    #
    options: {}

  # In case of using file or sql storage, sets up a 3 node cluster.
  cluster:
    enabled: false
    logPath: /data/stan/log

  #
  # SQL storage settings
  #
  sql:
    driver: postgres

    # TODO: Use secret reference and include instead for the password.
    #
    # e.g.
    # source: "dbname=postgres user=postgres password=stan host=stan-db sslmode=disable"
    #
    source: ""

    # Initialize the database.
    initdb:
      enabled: false

      # Client to use to init the db.
      image: postgres:11

    dbName: postgres
    dbUser: postgres
    dbPassword: stan
    dbHost: ""
    dbPort: 5432

  backup:
    enabled: false
    sleepTime: 3600
    s3Path: ""
    # To use backup functionality, you are required to either create a secret with the name you define here, or provide an instance profile.
    credentialsSecretName:
    backupScript: |-
      #!/bin/sh
      echo backup
    backupContainerScript: |-
      while true; do
        BAK_FILES=$(find ${STORE_FILE_PATH} -name '*.bak')
        aws s3 cp \
        ${STORE_FILE_PATH} \
        ${STORE_BACKUP_S3PATH}/${STAN_NAME}/${POD_NAME}/ --recursive

        RESULT=$?
        if [ $RESULT -eq 0 ]; then
          for i in $(echo ${BAK_FILES}); do
            rm -f ${i}
          done
        else
          echo "Error backing up! Do not remove .bak files."
        fi

        sleep "${SLEEP_TIME}"
      done
    # Resource requests and limits for backup container
    # ref: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
    resources: {}


#######################################
#                                     #
# Prometheus Exporter configuration   #
#                                     #
#######################################
exporter:
  enabled: true
  image: synadia/prometheus-nats-exporter:0.6.2
  pullPolicy: IfNotPresent

##################################
#                                #
#  Embedded NATS Configuration   #
#                                #
##################################
# TODO: Support NATS embedded mode by including
# nats chart values.
